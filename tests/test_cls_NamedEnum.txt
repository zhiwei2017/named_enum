# Copyright 2009-2018 Zhiwei Zhang. All Rights Reserved.

# Test __new__ function from meta class:

    >>> import types
    >>> from named_enum import NamedEnum
    >>> class ExtendedEnum(NamedEnum):
    ...     pass
    >>> class TripleEnum(NamedEnum):
    ...     _field_names_ = ["first", "second", "third"]

    >>> class Pair(ExtendedEnum):
    ...     TOM_AND_JERRY = ("Tom", "Jerry")
    ...     MIKE_AND_MOLLY = ("Mike", "Molly")
    ...     MIKE_AND_PIPPEN = ("Mike", "Pippen")
    ...     MM_AND_M = ("Mike", "Molly")
    >>> class Triple(TripleEnum):
    ...     SIMPSONS = ("Homer", "Bart", "Marge")
    ...     DUCKS = ("Huey", "Dewey", "Louie")
    ...     MCDUCK_NEPHEWS = ("Huey", "Dewey", "Louie")
    ...     THE_SIMPSONS = ("Homer", "Marge", "Lisa")

    >>> class TripleFailLess(TripleEnum):
    ...     TOM_AND_JERRY = ("Tom", "Jerry")
    ...     MIKE_AND_MOLLY = ("Mike", "Molly")
    Traceback (most recent call last):
    ...
    TypeError: __new__() missing 1 required positional argument: 'third'
    >>> class TripleFailMore(TripleEnum):
    ...     TOM_AND_JERRY = ("Tom", "Jerry", "Cat", "Mouse")
    ...     MIKE_AND_MOLLY = ("Mike", "Molly", "Husband", "Wife")
    Traceback (most recent call last):
    ...
    TypeError: __new__() takes 4 positional arguments but 5 were given

# Test class method _fields::

    >>> NamedEnum._fields()
    ()
    >>> ExtendedEnum._fields()
    ()
    >>> TripleEnum._fields()
    ('first', 'second', 'third')
    >>> Pair._fields()
    ()
    >>> Triple._fields()
    ('first', 'second', 'third')

    >>> Pair.TOM_AND_JERRY._fields()
    Traceback (most recent call last):
    ...
    AttributeError: 'Pair' object has no attribute '_fields'
    >>> Pair.MIKE_AND_MOLLY._fields()
    Traceback (most recent call last):
    ...
    AttributeError: 'Pair' object has no attribute '_fields'
    >>> Pair.MIKE_AND_PIPPEN._fields()
    Traceback (most recent call last):
    ...
    AttributeError: 'Pair' object has no attribute '_fields'
    >>> Pair.MM_AND_M._fields()
    Traceback (most recent call last):
    ...
    AttributeError: 'Pair' object has no attribute '_fields'

    >>> Triple.SIMPSONS._fields()
    Traceback (most recent call last):
    ...
    AttributeError: 'Triple' object has no attribute '_fields'
    >>> Triple.DUCKS._fields()
    Traceback (most recent call last):
    ...
    AttributeError: 'Triple' object has no attribute '_fields'
    >>> Triple.MCDUCK_NEPHEWS._fields()
    Traceback (most recent call last):
    ...
    AttributeError: 'Triple' object has no attribute '_fields'
    >>> Triple.THE_SIMPSONS._fields()
    Traceback (most recent call last):
    ...
    AttributeError: 'Triple' object has no attribute '_fields'

# Test class method names with parameter as_tuple=True::

    >>> NamedEnum.names()
    ()
    >>> ExtendedEnum.names()
    ()
    >>> TripleEnum.names()
    ()
    >>> Pair.names()
    ('TOM_AND_JERRY', 'MIKE_AND_MOLLY', 'MIKE_AND_PIPPEN', 'MM_AND_M')
    >>> Triple.names()
    ('SIMPSONS', 'DUCKS', 'MCDUCK_NEPHEWS', 'THE_SIMPSONS')

    >>> Pair.TOM_AND_JERRY.names()
    Traceback (most recent call last):
    ...
    AttributeError: 'Pair' object has no attribute 'names'
    >>> Pair.MIKE_AND_MOLLY.names()
    Traceback (most recent call last):
    ...
    AttributeError: 'Pair' object has no attribute 'names'
    >>> Pair.MIKE_AND_PIPPEN.names()
    Traceback (most recent call last):
    ...
    AttributeError: 'Pair' object has no attribute 'names'
    >>> Pair.MM_AND_M.names()
    Traceback (most recent call last):
    ...
    AttributeError: 'Pair' object has no attribute 'names'

    >>> Triple.SIMPSONS.names()
    Traceback (most recent call last):
    ...
    AttributeError: 'Triple' object has no attribute 'names'
    >>> Triple.DUCKS.names()
    Traceback (most recent call last):
    ...
    AttributeError: 'Triple' object has no attribute 'names'
    >>> Triple.MCDUCK_NEPHEWS.names()
    Traceback (most recent call last):
    ...
    AttributeError: 'Triple' object has no attribute 'names'
    >>> Triple.THE_SIMPSONS.names()
    Traceback (most recent call last):
    ...
    AttributeError: 'Triple' object has no attribute 'names'

# Test class method names with parameter as_tuple=False::

    >>> isinstance(NamedEnum.names(as_tuple=False), types.GeneratorType)
    True
    >>> tuple(NamedEnum.names(as_tuple=False))
    ()
    >>> isinstance(ExtendedEnum.names(as_tuple=False), types.GeneratorType)
    True
    >>> tuple(ExtendedEnum.names(as_tuple=False))
    ()
    >>> isinstance(TripleEnum.names(as_tuple=False), types.GeneratorType)
    True
    >>> tuple(TripleEnum.names(as_tuple=False))
    ()
    >>> isinstance(Pair.names(as_tuple=False), types.GeneratorType)
    True
    >>> tuple(Pair.names(as_tuple=False))
    ('TOM_AND_JERRY', 'MIKE_AND_MOLLY', 'MIKE_AND_PIPPEN', 'MM_AND_M')
    >>> isinstance(Triple.names(as_tuple=False), types.GeneratorType)
    True
    >>> tuple(Triple.names(as_tuple=False))
    ('SIMPSONS', 'DUCKS', 'MCDUCK_NEPHEWS', 'THE_SIMPSONS')

    >>> Pair.TOM_AND_JERRY.names(as_tuple=False)
    Traceback (most recent call last):
    ...
    AttributeError: 'Pair' object has no attribute 'names'
    >>> Pair.MIKE_AND_MOLLY.names()
    Traceback (most recent call last):
    ...
    AttributeError: 'Pair' object has no attribute 'names'
    >>> Pair.MIKE_AND_PIPPEN.names(as_tuple=False)
    Traceback (most recent call last):
    ...
    AttributeError: 'Pair' object has no attribute 'names'
    >>> Pair.MM_AND_M.names(as_tuple=False)
    Traceback (most recent call last):
    ...
    AttributeError: 'Pair' object has no attribute 'names'

    >>> Triple.SIMPSONS.names(as_tuple=False)
    Traceback (most recent call last):
    ...
    AttributeError: 'Triple' object has no attribute 'names'
    >>> Triple.DUCKS.names(as_tuple=False)
    Traceback (most recent call last):
    ...
    AttributeError: 'Triple' object has no attribute 'names'
    >>> Triple.MCDUCK_NEPHEWS.names(as_tuple=False)
    Traceback (most recent call last):
    ...
    AttributeError: 'Triple' object has no attribute 'names'
    >>> Triple.THE_SIMPSONS.names(as_tuple=False)
    Traceback (most recent call last):
    ...
    AttributeError: 'Triple' object has no attribute 'names'

# Test class method values with parameter as_tuple=True::

    >>> NamedEnum.values()
    ()
    >>> ExtendedEnum.values()
    ()
    >>> TripleEnum.values()
    ()
    >>> Pair.values()
    (('Tom', 'Jerry'), ('Mike', 'Molly'), ('Mike', 'Pippen'), ('Mike', 'Molly'))
    >>> Triple.values()
    (NamedTuple(first='Homer', second='Bart', third='Marge'), NamedTuple(first='Huey', second='Dewey', third='Louie'), NamedTuple(first='Huey', second='Dewey', third='Louie'), NamedTuple(first='Homer', second='Marge', third='Lisa'))

    >>> Pair.TOM_AND_JERRY.values()
    Traceback (most recent call last):
    ...
    AttributeError: 'Pair' object has no attribute 'values'
    >>> Pair.MIKE_AND_MOLLY.values()
    Traceback (most recent call last):
    ...
    AttributeError: 'Pair' object has no attribute 'values'
    >>> Pair.MIKE_AND_PIPPEN.values()
    Traceback (most recent call last):
    ...
    AttributeError: 'Pair' object has no attribute 'values'
    >>> Pair.MM_AND_M.values()
    Traceback (most recent call last):
    ...
    AttributeError: 'Pair' object has no attribute 'values'

    >>> Triple.SIMPSONS.values()
    Traceback (most recent call last):
    ...
    AttributeError: 'Triple' object has no attribute 'values'
    >>> Triple.DUCKS.values()
    Traceback (most recent call last):
    ...
    AttributeError: 'Triple' object has no attribute 'values'
    >>> Triple.MCDUCK_NEPHEWS.values()
    Traceback (most recent call last):
    ...
    AttributeError: 'Triple' object has no attribute 'values'
    >>> Triple.THE_SIMPSONS.values()
    Traceback (most recent call last):
    ...
    AttributeError: 'Triple' object has no attribute 'values'

# Test class method values with parameter as_tuple=False::

    >>> isinstance(NamedEnum.values(as_tuple=False), types.GeneratorType)
    True
    >>> tuple(NamedEnum.values(as_tuple=False))
    ()
    >>> isinstance(ExtendedEnum.values(as_tuple=False), types.GeneratorType)
    True
    >>> tuple(ExtendedEnum.values(as_tuple=False))
    ()
    >>> isinstance(TripleEnum.values(as_tuple=False), types.GeneratorType)
    True
    >>> tuple(TripleEnum.values(as_tuple=False))
    ()
    >>> isinstance(Pair.values(as_tuple=False), types.GeneratorType)
    True
    >>> tuple(Pair.values(as_tuple=False))
    (('Tom', 'Jerry'), ('Mike', 'Molly'), ('Mike', 'Pippen'), ('Mike', 'Molly'))
    >>> isinstance(Triple.values(as_tuple=False), types.GeneratorType)
    True
    >>> tuple(Triple.values(as_tuple=False))
    (NamedTuple(first='Homer', second='Bart', third='Marge'), NamedTuple(first='Huey', second='Dewey', third='Louie'), NamedTuple(first='Huey', second='Dewey', third='Louie'), NamedTuple(first='Homer', second='Marge', third='Lisa'))

    >>> Pair.TOM_AND_JERRY.values(as_tuple=False)
    Traceback (most recent call last):
    ...
    AttributeError: 'Pair' object has no attribute 'values'
    >>> Pair.MIKE_AND_MOLLY.values(as_tuple=False)
    Traceback (most recent call last):
    ...
    AttributeError: 'Pair' object has no attribute 'values'
    >>> Pair.MIKE_AND_PIPPEN.values(as_tuple=False)
    Traceback (most recent call last):
    ...
    AttributeError: 'Pair' object has no attribute 'values'
    >>> Pair.MM_AND_M.values(as_tuple=False)
    Traceback (most recent call last):
    ...
    AttributeError: 'Pair' object has no attribute 'values'

    >>> Triple.SIMPSONS.values(as_tuple=False)
    Traceback (most recent call last):
    ...
    AttributeError: 'Triple' object has no attribute 'values'
    >>> Triple.DUCKS.values(as_tuple=False)
    Traceback (most recent call last):
    ...
    AttributeError: 'Triple' object has no attribute 'values'
    >>> Triple.MCDUCK_NEPHEWS.values(as_tuple=False)
    Traceback (most recent call last):
    ...
    AttributeError: 'Triple' object has no attribute 'values'
    >>> Triple.THE_SIMPSONS.values(as_tuple=False)
    Traceback (most recent call last):
    ...
    AttributeError: 'Triple' object has no attribute 'values'

# Test class method describe::

    >>> NamedEnum.describe()
    Class: NamedEnum
    Name | Value
    ------------
    <BLANKLINE>
    >>> ExtendedEnum.describe()
    Class: ExtendedEnum
    Name | Value
    ------------
    <BLANKLINE>
    >>> TripleEnum.describe()
    Class: TripleEnum
    Name | First | Second | Third
    -----------------------------
    <BLANKLINE>
    >>> Pair.describe()
    Class: Pair
               Name |              Value
    ------------------------------------
      TOM_AND_JERRY |   ('Tom', 'Jerry')
     MIKE_AND_MOLLY |  ('Mike', 'Molly')
    MIKE_AND_PIPPEN | ('Mike', 'Pippen')
           MM_AND_M |  ('Mike', 'Molly')
    <BLANKLINE>
    >>> Triple.describe()
    Class: Triple
              Name | First | Second | Third
    ---------------------------------------
          SIMPSONS | Homer |   Bart | Marge
             DUCKS |  Huey |  Dewey | Louie
    MCDUCK_NEPHEWS |  Huey |  Dewey | Louie
      THE_SIMPSONS | Homer |  Marge |  Lisa
    <BLANKLINE>

    >>> Pair.TOM_AND_JERRY.describe()
    Traceback (most recent call last):
    ...
    AttributeError: 'Pair' object has no attribute 'describe'
    >>> Pair.MIKE_AND_MOLLY.describe()
    Traceback (most recent call last):
    ...
    AttributeError: 'Pair' object has no attribute 'describe'
    >>> Pair.MIKE_AND_PIPPEN.describe()
    Traceback (most recent call last):
    ...
    AttributeError: 'Pair' object has no attribute 'describe'
    >>> Pair.MM_AND_M.describe()
    Traceback (most recent call last):
    ...
    AttributeError: 'Pair' object has no attribute 'describe'


    >>> Triple.SIMPSONS.describe()
    Traceback (most recent call last):
    ...
    AttributeError: 'Triple' object has no attribute 'describe'
    >>> Triple.DUCKS.describe()
    Traceback (most recent call last):
    ...
    AttributeError: 'Triple' object has no attribute 'describe'
    >>> Triple.MCDUCK_NEPHEWS.describe()
    Traceback (most recent call last):
    ...
    AttributeError: 'Triple' object has no attribute 'describe'
    >>> Triple.THE_SIMPSONS.describe()
    Traceback (most recent call last):
    ...
    AttributeError: 'Triple' object has no attribute 'describe'

# Test class method gen::

    >>> isinstance(NamedEnum.gen(), types.GeneratorType)
    True
    >>> tuple(NamedEnum.gen())
    ()
    >>> isinstance(ExtendedEnum.gen(), types.GeneratorType)
    True
    >>> tuple(ExtendedEnum.gen())
    ()
    >>> isinstance(TripleEnum.gen(), types.GeneratorType)
    True
    >>> tuple(TripleEnum.gen())
    ()
    >>> isinstance(Pair.gen(), types.GeneratorType)
    True
    >>> tuple(Pair.gen())
    (('TOM_AND_JERRY', ('Tom', 'Jerry')), ('MIKE_AND_MOLLY', ('Mike', 'Molly')), ('MIKE_AND_PIPPEN', ('Mike', 'Pippen')), ('MM_AND_M', ('Mike', 'Molly')))
    >>> isinstance(Triple.gen(), types.GeneratorType)
    True
    >>> tuple(Triple.gen())
    (('SIMPSONS', NamedTuple(first='Homer', second='Bart', third='Marge')), ('DUCKS', NamedTuple(first='Huey', second='Dewey', third='Louie')), ('MCDUCK_NEPHEWS', NamedTuple(first='Huey', second='Dewey', third='Louie')), ('THE_SIMPSONS', NamedTuple(first='Homer', second='Marge', third='Lisa')))

    >>> Pair.TOM_AND_JERRY.gen()
    Traceback (most recent call last):
    ...
    AttributeError: 'Pair' object has no attribute 'gen'
    >>> Pair.MIKE_AND_MOLLY.gen()
    Traceback (most recent call last):
    ...
    AttributeError: 'Pair' object has no attribute 'gen'
    >>> Pair.MIKE_AND_PIPPEN.gen()
    Traceback (most recent call last):
    ...
    AttributeError: 'Pair' object has no attribute 'gen'
    >>> Pair.MM_AND_M.gen()
    Traceback (most recent call last):
    ...
    AttributeError: 'Pair' object has no attribute 'gen'
    >>> Triple.SIMPSONS.gen()
    Traceback (most recent call last):
    ...
    AttributeError: 'Triple' object has no attribute 'gen'
    >>> Triple.DUCKS.gen()
    Traceback (most recent call last):
    ...
    AttributeError: 'Triple' object has no attribute 'gen'
    >>> Triple.MCDUCK_NEPHEWS.gen()
    Traceback (most recent call last):
    ...
    AttributeError: 'Triple' object has no attribute 'gen'
    >>> Triple.THE_SIMPSONS.gen()
    Traceback (most recent call last):
    ...
    AttributeError: 'Triple' object has no attribute 'gen'

# Test class method as_dict::

    >>> NamedEnum.as_dict()
    {}
    >>> ExtendedEnum.as_dict()
    {}
    >>> TripleEnum.as_dict()
    {}
    >>> Pair.as_dict()
    {'TOM_AND_JERRY': ('Tom', 'Jerry'), 'MIKE_AND_MOLLY': ('Mike', 'Molly'), 'MIKE_AND_PIPPEN': ('Mike', 'Pippen'), 'MM_AND_M': ('Mike', 'Molly')}
    >>> Triple.as_dict()
    {'SIMPSONS': NamedTuple(first='Homer', second='Bart', third='Marge'), 'DUCKS': NamedTuple(first='Huey', second='Dewey', third='Louie'), 'MCDUCK_NEPHEWS': NamedTuple(first='Huey', second='Dewey', third='Louie'), 'THE_SIMPSONS': NamedTuple(first='Homer', second='Marge', third='Lisa')}

    >>> Pair.TOM_AND_JERRY.as_dict()
    Traceback (most recent call last):
    ...
    AttributeError: 'Pair' object has no attribute 'as_dict'
    >>> Pair.MIKE_AND_MOLLY.as_dict()
    Traceback (most recent call last):
    ...
    AttributeError: 'Pair' object has no attribute 'as_dict'
    >>> Pair.MIKE_AND_PIPPEN.as_dict()
    Traceback (most recent call last):
    ...
    AttributeError: 'Pair' object has no attribute 'as_dict'
    >>> Pair.MM_AND_M.as_dict()
    Traceback (most recent call last):
    ...
    AttributeError: 'Pair' object has no attribute 'as_dict'

    >>> Triple.SIMPSONS.as_dict()
    Traceback (most recent call last):
    ...
    AttributeError: 'Triple' object has no attribute 'as_dict'
    >>> Triple.DUCKS.as_dict()
    Traceback (most recent call last):
    ...
    AttributeError: 'Triple' object has no attribute 'as_dict'
    >>> Triple.MCDUCK_NEPHEWS.as_dict()
    Traceback (most recent call last):
    ...
    AttributeError: 'Triple' object has no attribute 'as_dict'
    >>> Triple.THE_SIMPSONS.as_dict()
    Traceback (most recent call last):
    ...
    AttributeError: 'Triple' object has no attribute 'as_dict'

# Test class method as_list::

    >>> NamedEnum.as_list()
    []
    >>> ExtendedEnum.as_list()
    []
    >>> TripleEnum.as_list()
    []
    >>> Pair.as_list()
    [('TOM_AND_JERRY', ('Tom', 'Jerry')), ('MIKE_AND_MOLLY', ('Mike', 'Molly')), ('MIKE_AND_PIPPEN', ('Mike', 'Pippen')), ('MM_AND_M', ('Mike', 'Molly'))]
    >>> Triple.as_list()
    [('SIMPSONS', NamedTuple(first='Homer', second='Bart', third='Marge')), ('DUCKS', NamedTuple(first='Huey', second='Dewey', third='Louie')), ('MCDUCK_NEPHEWS', NamedTuple(first='Huey', second='Dewey', third='Louie')), ('THE_SIMPSONS', NamedTuple(first='Homer', second='Marge', third='Lisa'))]

    >>> Pair.TOM_AND_JERRY.as_list()
    Traceback (most recent call last):
    ...
    AttributeError: 'Pair' object has no attribute 'as_list'
    >>> Pair.MIKE_AND_MOLLY.as_list()
    Traceback (most recent call last):
    ...
    AttributeError: 'Pair' object has no attribute 'as_list'
    >>> Pair.MIKE_AND_PIPPEN.as_list()
    Traceback (most recent call last):
    ...
    AttributeError: 'Pair' object has no attribute 'as_list'
    >>> Pair.MM_AND_M.as_list()
    Traceback (most recent call last):
    ...
    AttributeError: 'Pair' object has no attribute 'as_list'

    >>> Triple.SIMPSONS.as_list()
    Traceback (most recent call last):
    ...
    AttributeError: 'Triple' object has no attribute 'as_list'
    >>> Triple.DUCKS.as_list()
    Traceback (most recent call last):
    ...
    AttributeError: 'Triple' object has no attribute 'as_list'
    >>> Triple.MCDUCK_NEPHEWS.as_list()
    Traceback (most recent call last):
    ...
    AttributeError: 'Triple' object has no attribute 'as_list'
    >>> Triple.THE_SIMPSONS.as_list()
    Traceback (most recent call last):
    ...
    AttributeError: 'Triple' object has no attribute 'as_list'

# Test class method as_tuple::

    >>> NamedEnum.as_tuple()
    ()
    >>> ExtendedEnum.as_tuple()
    ()
    >>> TripleEnum.as_tuple()
    ()
    >>> Pair.as_tuple()
    (('TOM_AND_JERRY', ('Tom', 'Jerry')), ('MIKE_AND_MOLLY', ('Mike', 'Molly')), ('MIKE_AND_PIPPEN', ('Mike', 'Pippen')), ('MM_AND_M', ('Mike', 'Molly')))
    >>> Triple.as_tuple()
    (('SIMPSONS', NamedTuple(first='Homer', second='Bart', third='Marge')), ('DUCKS', NamedTuple(first='Huey', second='Dewey', third='Louie')), ('MCDUCK_NEPHEWS', NamedTuple(first='Huey', second='Dewey', third='Louie')), ('THE_SIMPSONS', NamedTuple(first='Homer', second='Marge', third='Lisa')))

    >>> Pair.TOM_AND_JERRY.as_tuple()
    Traceback (most recent call last):
    ...
    AttributeError: 'Pair' object has no attribute 'as_tuple'
    >>> Pair.MIKE_AND_MOLLY.as_tuple()
    Traceback (most recent call last):
    ...
    AttributeError: 'Pair' object has no attribute 'as_tuple'
    >>> Pair.MIKE_AND_PIPPEN.as_tuple()
    Traceback (most recent call last):
    ...
    AttributeError: 'Pair' object has no attribute 'as_tuple'
    >>> Pair.MM_AND_M.as_tuple()
    Traceback (most recent call last):
    ...
    AttributeError: 'Pair' object has no attribute 'as_tuple'


    >>> Triple.SIMPSONS.as_tuple()
    Traceback (most recent call last):
    ...
    AttributeError: 'Triple' object has no attribute 'as_tuple'
    >>> Triple.DUCKS.as_tuple()
    Traceback (most recent call last):
    ...
    AttributeError: 'Triple' object has no attribute 'as_tuple'
    >>> Triple.MCDUCK_NEPHEWS.as_tuple()
    Traceback (most recent call last):
    ...
    AttributeError: 'Triple' object has no attribute 'as_tuple'
    >>> Triple.THE_SIMPSONS.as_tuple()
    Traceback (most recent call last):
    ...
    AttributeError: 'Triple' object has no attribute 'as_tuple'

# Test class method as_set::

    >>> NamedEnum.as_set()
    set()
    >>> ExtendedEnum.as_set()
    set()
    >>> TripleEnum.as_set()
    set()
    >>> Pair.as_set() == {('TOM_AND_JERRY', ('Tom', 'Jerry')), ('MIKE_AND_MOLLY', ('Mike', 'Molly')), ('MIKE_AND_PIPPEN', ('Mike', 'Pippen')), ('MM_AND_M', ('Mike', 'Molly'))}
    True
    >>> from collections import namedtuple
    >>> NamedTuple = namedtuple("NamedTuple", TripleEnum._fields())
    >>> Triple.as_set() == {('SIMPSONS', NamedTuple(first='Homer', second='Bart', third='Marge')), ('DUCKS', NamedTuple(first='Huey', second='Dewey', third='Louie')), ('MCDUCK_NEPHEWS', NamedTuple(first='Huey', second='Dewey', third='Louie')), ('THE_SIMPSONS', NamedTuple(first='Homer', second='Marge', third='Lisa'))}
    True

    >>> Pair.TOM_AND_JERRY.as_set()
    Traceback (most recent call last):
    ...
    AttributeError: 'Pair' object has no attribute 'as_set'
    >>> Pair.MIKE_AND_MOLLY.as_set()
    Traceback (most recent call last):
    ...
    AttributeError: 'Pair' object has no attribute 'as_set'
    >>> Pair.MIKE_AND_PIPPEN.as_set()
    Traceback (most recent call last):
    ...
    AttributeError: 'Pair' object has no attribute 'as_set'
    >>> Pair.MM_AND_M.as_set()
    Traceback (most recent call last):
    ...
    AttributeError: 'Pair' object has no attribute 'as_set'

    >>> Triple.SIMPSONS.as_set()
    Traceback (most recent call last):
    ...
    AttributeError: 'Triple' object has no attribute 'as_set'
    >>> Triple.DUCKS.as_set()
    Traceback (most recent call last):
    ...
    AttributeError: 'Triple' object has no attribute 'as_set'
    >>> Triple.MCDUCK_NEPHEWS.as_set()
    Traceback (most recent call last):
    ...
    AttributeError: 'Triple' object has no attribute 'as_set'
    >>> Triple.THE_SIMPSONS.as_set()
    Traceback (most recent call last):
    ...
    AttributeError: 'Triple' object has no attribute 'as_set'

# Test class method as_ordereddict::

    >>> NamedEnum.as_ordereddict()
    OrderedDict()
    >>> ExtendedEnum.as_ordereddict()
    OrderedDict()
    >>> TripleEnum.as_ordereddict()
    OrderedDict()
    >>> Pair.as_ordereddict()
    OrderedDict([('TOM_AND_JERRY', ('Tom', 'Jerry')), ('MIKE_AND_MOLLY', ('Mike', 'Molly')), ('MIKE_AND_PIPPEN', ('Mike', 'Pippen')), ('MM_AND_M', ('Mike', 'Molly'))])
    >>> Triple.as_ordereddict()
    OrderedDict([('SIMPSONS', NamedTuple(first='Homer', second='Bart', third='Marge')), ('DUCKS', NamedTuple(first='Huey', second='Dewey', third='Louie')), ('MCDUCK_NEPHEWS', NamedTuple(first='Huey', second='Dewey', third='Louie')), ('THE_SIMPSONS', NamedTuple(first='Homer', second='Marge', third='Lisa'))])

    >>> Pair.TOM_AND_JERRY.as_ordereddict()
    Traceback (most recent call last):
    ...
    AttributeError: 'Pair' object has no attribute 'as_ordereddict'
    >>> Pair.MIKE_AND_MOLLY.as_ordereddict()
    Traceback (most recent call last):
    ...
    AttributeError: 'Pair' object has no attribute 'as_ordereddict'
    >>> Pair.MIKE_AND_PIPPEN.as_ordereddict()
    Traceback (most recent call last):
    ...
    AttributeError: 'Pair' object has no attribute 'as_ordereddict'
    >>> Pair.MM_AND_M.as_ordereddict()
    Traceback (most recent call last):
    ...
    AttributeError: 'Pair' object has no attribute 'as_ordereddict'

    >>> Triple.SIMPSONS.as_ordereddict()
    Traceback (most recent call last):
    ...
    AttributeError: 'Triple' object has no attribute 'as_ordereddict'
    >>> Triple.DUCKS.as_ordereddict()
    Traceback (most recent call last):
    ...
    AttributeError: 'Triple' object has no attribute 'as_ordereddict'
    >>> Triple.MCDUCK_NEPHEWS.as_ordereddict()
    Traceback (most recent call last):
    ...
    AttributeError: 'Triple' object has no attribute 'as_ordereddict'
    >>> Triple.THE_SIMPSONS.as_ordereddict()
    Traceback (most recent call last):
    ...
    AttributeError: 'Triple' object has no attribute 'as_ordereddict'

# Test class method firsts with parameter as_tuple=True::

    >>> NamedEnum.firsts()
    Traceback (most recent call last):
    ...
    AttributeError: firsts
    >>> ExtendedEnum.firsts()
    Traceback (most recent call last):
    ...
    AttributeError: firsts
    >>> Pair.firsts()
    Traceback (most recent call last):
    ...
    AttributeError: firsts
    >>> Pair.TOM_AND_JERRY.firsts()
    Traceback (most recent call last):
    ...
    AttributeError: 'Pair' object has no attribute 'firsts'
    >>> Pair.MIKE_AND_MOLLY.firsts()
    Traceback (most recent call last):
    ...
    AttributeError: 'Pair' object has no attribute 'firsts'
    >>> Pair.MIKE_AND_PIPPEN.firsts()
    Traceback (most recent call last):
    ...
    AttributeError: 'Pair' object has no attribute 'firsts'
    >>> Pair.MM_AND_M.firsts()
    Traceback (most recent call last):
    ...
    AttributeError: 'Pair' object has no attribute 'firsts'

    >>> TripleEnum.firsts()
    ()
    >>> Triple.firsts()
    ('Homer', 'Huey', 'Huey', 'Homer')
    >>> Triple.SIMPSONS.firsts()
    ('Homer', 'Huey', 'Huey', 'Homer')
    >>> Triple.DUCKS.firsts()
    ('Homer', 'Huey', 'Huey', 'Homer')
    >>> Triple.MCDUCK_NEPHEWS.firsts()
    ('Homer', 'Huey', 'Huey', 'Homer')
    >>> Triple.THE_SIMPSONS.firsts()
    ('Homer', 'Huey', 'Huey', 'Homer')

# Test class method firsts with parameter as_tuple=False::

    >>> isinstance(TripleEnum.firsts(as_tuple=False), types.GeneratorType)
    True
    >>> tuple(TripleEnum.firsts(as_tuple=False))
    ()
    >>> isinstance(Triple.firsts(as_tuple=False), types.GeneratorType)
    True
    >>> tuple(Triple.firsts(as_tuple=False))
    ('Homer', 'Huey', 'Huey', 'Homer')
    >>> isinstance(Triple.SIMPSONS.firsts(as_tuple=False), types.GeneratorType)
    True
    >>> tuple(Triple.SIMPSONS.firsts(as_tuple=False))
    ('Homer', 'Huey', 'Huey', 'Homer')
    >>> isinstance(Triple.DUCKS.firsts(as_tuple=False), types.GeneratorType)
    True
    >>> tuple(Triple.DUCKS.firsts(as_tuple=False))
    ('Homer', 'Huey', 'Huey', 'Homer')
    >>> isinstance(Triple.MCDUCK_NEPHEWS.firsts(as_tuple=False), types.GeneratorType)
    True
    >>> tuple(Triple.MCDUCK_NEPHEWS.firsts(as_tuple=False))
    ('Homer', 'Huey', 'Huey', 'Homer')
    >>> isinstance(Triple.THE_SIMPSONS.firsts(as_tuple=False), types.GeneratorType)
    True
    >>> tuple(Triple.THE_SIMPSONS.firsts(as_tuple=False))
    ('Homer', 'Huey', 'Huey', 'Homer')

# Test class method seconds with parameter as_tuple=True::

    >>> NamedEnum.seconds()
    Traceback (most recent call last):
    ...
    AttributeError: seconds
    >>> ExtendedEnum.seconds()
    Traceback (most recent call last):
    ...
    AttributeError: seconds
    >>> Pair.seconds()
    Traceback (most recent call last):
    ...
    AttributeError: seconds
    >>> Pair.TOM_AND_JERRY.seconds()
    Traceback (most recent call last):
    ...
    AttributeError: 'Pair' object has no attribute 'seconds'
    >>> Pair.MIKE_AND_MOLLY.seconds()
    Traceback (most recent call last):
    ...
    AttributeError: 'Pair' object has no attribute 'seconds'
    >>> Pair.MIKE_AND_PIPPEN.seconds()
    Traceback (most recent call last):
    ...
    AttributeError: 'Pair' object has no attribute 'seconds'
    >>> Pair.MM_AND_M.seconds()
    Traceback (most recent call last):
    ...
    AttributeError: 'Pair' object has no attribute 'seconds'

    >>> TripleEnum.seconds()
    ()
    >>> Triple.seconds()
    ('Bart', 'Dewey', 'Dewey', 'Marge')
    >>> Triple.SIMPSONS.seconds()
    ('Bart', 'Dewey', 'Dewey', 'Marge')
    >>> Triple.DUCKS.seconds()
    ('Bart', 'Dewey', 'Dewey', 'Marge')
    >>> Triple.MCDUCK_NEPHEWS.seconds()
    ('Bart', 'Dewey', 'Dewey', 'Marge')
    >>> Triple.THE_SIMPSONS.seconds()
    ('Bart', 'Dewey', 'Dewey', 'Marge')

# Test class method seconds with parameter as_tuple=False::

    >>> isinstance(TripleEnum.seconds(as_tuple=False), types.GeneratorType)
    True
    >>> tuple(TripleEnum.seconds(as_tuple=False))
    ()
    >>> isinstance(Triple.seconds(as_tuple=False), types.GeneratorType)
    True
    >>> tuple(Triple.seconds(as_tuple=False))
    ('Bart', 'Dewey', 'Dewey', 'Marge')
    >>> isinstance(Triple.SIMPSONS.seconds(as_tuple=False), types.GeneratorType)
    True
    >>> tuple(Triple.SIMPSONS.seconds(as_tuple=False))
    ('Bart', 'Dewey', 'Dewey', 'Marge')
    >>> isinstance(Triple.DUCKS.seconds(as_tuple=False), types.GeneratorType)
    True
    >>> tuple(Triple.DUCKS.seconds(as_tuple=False))
    ('Bart', 'Dewey', 'Dewey', 'Marge')
    >>> isinstance(Triple.MCDUCK_NEPHEWS.seconds(as_tuple=False), types.GeneratorType)
    True
    >>> tuple(Triple.MCDUCK_NEPHEWS.seconds(as_tuple=False))
    ('Bart', 'Dewey', 'Dewey', 'Marge')
    >>> isinstance(Triple.THE_SIMPSONS.seconds(as_tuple=False), types.GeneratorType)
    True
    >>> tuple(Triple.THE_SIMPSONS.seconds(as_tuple=False))
    ('Bart', 'Dewey', 'Dewey', 'Marge')

Test class method thirds with parameter as_tuple=True::

    >>> NamedEnum.thirds()
    Traceback (most recent call last):
    ...
    AttributeError: thirds
    >>> ExtendedEnum.thirds()
    Traceback (most recent call last):
    ...
    AttributeError: thirds
    >>> Pair.thirds()
    Traceback (most recent call last):
    ...
    AttributeError: thirds
    >>> Pair.TOM_AND_JERRY.thirds()
    Traceback (most recent call last):
    ...
    AttributeError: 'Pair' object has no attribute 'thirds'
    >>> Pair.MIKE_AND_MOLLY.thirds()
    Traceback (most recent call last):
    ...
    AttributeError: 'Pair' object has no attribute 'thirds'
    >>> Pair.MIKE_AND_PIPPEN.thirds()
    Traceback (most recent call last):
    ...
    AttributeError: 'Pair' object has no attribute 'thirds'
    >>> Pair.MM_AND_M.thirds()
    Traceback (most recent call last):
    ...
    AttributeError: 'Pair' object has no attribute 'thirds'

    >>> TripleEnum.thirds()
    ()
    >>> Triple.thirds()
    ('Marge', 'Louie', 'Louie', 'Lisa')
    >>> Triple.SIMPSONS.thirds()
    ('Marge', 'Louie', 'Louie', 'Lisa')
    >>> Triple.DUCKS.thirds()
    ('Marge', 'Louie', 'Louie', 'Lisa')
    >>> Triple.MCDUCK_NEPHEWS.thirds()
    ('Marge', 'Louie', 'Louie', 'Lisa')
    >>> Triple.THE_SIMPSONS.thirds()
    ('Marge', 'Louie', 'Louie', 'Lisa')

Test class method thirds with parameter as_tuple=False::

    >>> isinstance(TripleEnum.thirds(as_tuple=False), types.GeneratorType)
    True
    >>> tuple(TripleEnum.thirds(as_tuple=False))
    ()
    >>> isinstance(Triple.seconds(as_tuple=False), types.GeneratorType)
    True
    >>> tuple(Triple.thirds(as_tuple=False))
    ('Marge', 'Louie', 'Louie', 'Lisa')
    >>> isinstance(Triple.SIMPSONS.seconds(as_tuple=False), types.GeneratorType)
    True
    >>> tuple(Triple.SIMPSONS.thirds(as_tuple=False))
    ('Marge', 'Louie', 'Louie', 'Lisa')
    >>> isinstance(Triple.DUCKS.seconds(as_tuple=False), types.GeneratorType)
    True
    >>> tuple(Triple.DUCKS.thirds(as_tuple=False))
    ('Marge', 'Louie', 'Louie', 'Lisa')
    >>> isinstance(Triple.MCDUCK_NEPHEWS.seconds(as_tuple=False), types.GeneratorType)
    True
    >>> tuple(Triple.MCDUCK_NEPHEWS.thirds(as_tuple=False))
    ('Marge', 'Louie', 'Louie', 'Lisa')
    >>> isinstance(Triple.THE_SIMPSONS.seconds(as_tuple=False), types.GeneratorType)
    True
    >>> tuple(Triple.THE_SIMPSONS.thirds(as_tuple=False))
    ('Marge', 'Louie', 'Louie', 'Lisa')

# Test not existent class method forths::

    >>> NamedEnum.forths()
    Traceback (most recent call last):
    ...
    AttributeError: forths
    >>> ExtendedEnum.forths()
    Traceback (most recent call last):
    ...
    AttributeError: forths
    >>> TripleEnum.forths()
    Traceback (most recent call last):
    ...
    AttributeError: forths
    >>> Pair.forths()
    Traceback (most recent call last):
    ...
    AttributeError: forths
    >>> Pair.TOM_AND_JERRY.forths()
    Traceback (most recent call last):
    ...
    AttributeError: 'Pair' object has no attribute 'forths'
    >>> Pair.MIKE_AND_MOLLY.forths()
    Traceback (most recent call last):
    ...
    AttributeError: 'Pair' object has no attribute 'forths'
    >>> Pair.MIKE_AND_PIPPEN.forths()
    Traceback (most recent call last):
    ...
    AttributeError: 'Pair' object has no attribute 'forths'
    >>> Pair.MM_AND_M.forths()
    Traceback (most recent call last):
    ...
    AttributeError: 'Pair' object has no attribute 'forths'

    >>> Triple.forths()
    Traceback (most recent call last):
    ...
    AttributeError: forths
    >>> Triple.SIMPSONS.forths()
    Traceback (most recent call last):
    ...
    AttributeError: 'Triple' object has no attribute 'forths'
    >>> Triple.DUCKS.forths()
    Traceback (most recent call last):
    ...
    AttributeError: 'Triple' object has no attribute 'forths'
    >>> Triple.MCDUCK_NEPHEWS.forths()
    Traceback (most recent call last):
    ...
    AttributeError: 'Triple' object has no attribute 'forths'
    >>> Triple.THE_SIMPSONS.forths()
    Traceback (most recent call last):
    ...
    AttributeError: 'Triple' object has no attribute 'forths'

# Test class method from_first with parameter as_tuple=True::

    >>> NamedEnum.from_first("Homer")
    Traceback (most recent call last):
    ...
    AttributeError: from_first
    >>> ExtendedEnum.from_first("Homer")
    Traceback (most recent call last):
    ...
    AttributeError: from_first
    >>> TripleEnum.from_first("Homer")
    ()
    >>> TripleEnum.from_first("Huey")
    ()

    >>> Pair.from_first("Tom")
    Traceback (most recent call last):
    ...
    AttributeError: from_first
    >>> Pair.TOM_AND_JERRY.from_first("Tom")
    Traceback (most recent call last):
    ...
    AttributeError: 'Pair' object has no attribute 'from_first'
    >>> Pair.MIKE_AND_MOLLY.from_first("Tom")
    Traceback (most recent call last):
    ...
    AttributeError: 'Pair' object has no attribute 'from_first'
    >>> Pair.MIKE_AND_PIPPEN.from_first("Tom")
    Traceback (most recent call last):
    ...
    AttributeError: 'Pair' object has no attribute 'from_first'
    >>> Pair.MM_AND_M.from_first("Tom")
    Traceback (most recent call last):
    ...
    AttributeError: 'Pair' object has no attribute 'from_first'

    >>> Triple.from_first("Homer")
    (<Triple.SIMPSONS: NamedTuple(first='Homer', second='Bart', third='Marge')>, <Triple.THE_SIMPSONS: NamedTuple(first='Homer', second='Marge', third='Lisa')>)
    >>> Triple.from_first("Huey")
    (<Triple.DUCKS: NamedTuple(first='Huey', second='Dewey', third='Louie')>, <Triple.DUCKS: NamedTuple(first='Huey', second='Dewey', third='Louie')>)
    >>> Triple.from_first("Homels")
    ()
    >>> Triple.from_first("Huth")
    ()

    >>> Triple.SIMPSONS.from_first("Homer")
    (<Triple.SIMPSONS: NamedTuple(first='Homer', second='Bart', third='Marge')>, <Triple.THE_SIMPSONS: NamedTuple(first='Homer', second='Marge', third='Lisa')>)
    >>> Triple.SIMPSONS.from_first("Huey")
    (<Triple.DUCKS: NamedTuple(first='Huey', second='Dewey', third='Louie')>, <Triple.DUCKS: NamedTuple(first='Huey', second='Dewey', third='Louie')>)
    >>> Triple.SIMPSONS.from_first("Homels")
    ()
    >>> Triple.SIMPSONS.from_first("Huth")
    ()

    >>> Triple.DUCKS.from_first("Homer")
    (<Triple.SIMPSONS: NamedTuple(first='Homer', second='Bart', third='Marge')>, <Triple.THE_SIMPSONS: NamedTuple(first='Homer', second='Marge', third='Lisa')>)
    >>> Triple.DUCKS.from_first("Huey")
    (<Triple.DUCKS: NamedTuple(first='Huey', second='Dewey', third='Louie')>, <Triple.DUCKS: NamedTuple(first='Huey', second='Dewey', third='Louie')>)
    >>> Triple.DUCKS.from_first("Homels")
    ()
    >>> Triple.DUCKS.from_first("Huth")
    ()

    >>> Triple.MCDUCK_NEPHEWS.from_first("Homer")
    (<Triple.SIMPSONS: NamedTuple(first='Homer', second='Bart', third='Marge')>, <Triple.THE_SIMPSONS: NamedTuple(first='Homer', second='Marge', third='Lisa')>)
    >>> Triple.MCDUCK_NEPHEWS.from_first("Huey")
    (<Triple.DUCKS: NamedTuple(first='Huey', second='Dewey', third='Louie')>, <Triple.DUCKS: NamedTuple(first='Huey', second='Dewey', third='Louie')>)
    >>> Triple.MCDUCK_NEPHEWS.from_first("Homels")
    ()
    >>> Triple.MCDUCK_NEPHEWS.from_first("Huth")
    ()

    >>> Triple.THE_SIMPSONS.from_first("Homer")
    (<Triple.SIMPSONS: NamedTuple(first='Homer', second='Bart', third='Marge')>, <Triple.THE_SIMPSONS: NamedTuple(first='Homer', second='Marge', third='Lisa')>)
    >>> Triple.THE_SIMPSONS.from_first("Huey")
    (<Triple.DUCKS: NamedTuple(first='Huey', second='Dewey', third='Louie')>, <Triple.DUCKS: NamedTuple(first='Huey', second='Dewey', third='Louie')>)
    >>> Triple.THE_SIMPSONS.from_first("Homels")
    ()
    >>> Triple.THE_SIMPSONS.from_first("Huth")
    ()

# Test class method from_first with parameter as_tuple=False::

    >>> isinstance(TripleEnum.from_first("Homer", as_tuple=False), types.GeneratorType)
    True
    >>> tuple(TripleEnum.from_first("Homer", as_tuple=False))
    ()
    >>> isinstance(TripleEnum.from_first("Huey", as_tuple=False), types.GeneratorType)
    True
    >>> tuple(TripleEnum.from_first("Huey", as_tuple=False))
    ()

    >>> isinstance(Triple.from_first("Homer", as_tuple=False), types.GeneratorType)
    True
    >>> tuple(Triple.from_first("Homer", as_tuple=False))
    (<Triple.SIMPSONS: NamedTuple(first='Homer', second='Bart', third='Marge')>, <Triple.THE_SIMPSONS: NamedTuple(first='Homer', second='Marge', third='Lisa')>)
    >>> isinstance(Triple.from_first("Huey", as_tuple=False), types.GeneratorType)
    True
    >>> tuple(Triple.from_first("Huey", as_tuple=False))
    (<Triple.DUCKS: NamedTuple(first='Huey', second='Dewey', third='Louie')>, <Triple.DUCKS: NamedTuple(first='Huey', second='Dewey', third='Louie')>)
    >>> isinstance(Triple.from_first("Homels", as_tuple=False), types.GeneratorType)
    True
    >>> tuple(Triple.from_first("Homels", as_tuple=False))
    ()
    >>> isinstance(Triple.from_first("Huth", as_tuple=False), types.GeneratorType)
    True
    >>> tuple(Triple.from_first("Huth", as_tuple=False))
    ()

    >>> isinstance(Triple.SIMPSONS.from_first("Homer", as_tuple=False), types.GeneratorType)
    True
    >>> tuple(Triple.SIMPSONS.from_first("Homer", as_tuple=False))
    (<Triple.SIMPSONS: NamedTuple(first='Homer', second='Bart', third='Marge')>, <Triple.THE_SIMPSONS: NamedTuple(first='Homer', second='Marge', third='Lisa')>)
    >>> isinstance(Triple.SIMPSONS.from_first("Huey", as_tuple=False), types.GeneratorType)
    True
    >>> tuple(Triple.SIMPSONS.from_first("Huey", as_tuple=False))
    (<Triple.DUCKS: NamedTuple(first='Huey', second='Dewey', third='Louie')>, <Triple.DUCKS: NamedTuple(first='Huey', second='Dewey', third='Louie')>)
    >>> isinstance(Triple.SIMPSONS.from_first("Homels", as_tuple=False), types.GeneratorType)
    True
    >>> tuple(Triple.SIMPSONS.from_first("Homels", as_tuple=False))
    ()
    >>> isinstance(Triple.SIMPSONS.from_first("Huth", as_tuple=False), types.GeneratorType)
    True
    >>> tuple(Triple.SIMPSONS.from_first("Huth", as_tuple=False))
    ()

    >>> isinstance(Triple.DUCKS.from_first("Homer", as_tuple=False), types.GeneratorType)
    True
    >>> tuple(Triple.DUCKS.from_first("Homer", as_tuple=False))
    (<Triple.SIMPSONS: NamedTuple(first='Homer', second='Bart', third='Marge')>, <Triple.THE_SIMPSONS: NamedTuple(first='Homer', second='Marge', third='Lisa')>)
    >>> isinstance(Triple.DUCKS.from_first("Huey", as_tuple=False), types.GeneratorType)
    True
    >>> tuple(Triple.DUCKS.from_first("Huey", as_tuple=False))
    (<Triple.DUCKS: NamedTuple(first='Huey', second='Dewey', third='Louie')>, <Triple.DUCKS: NamedTuple(first='Huey', second='Dewey', third='Louie')>)
    >>> isinstance(Triple.DUCKS.from_first("Homels", as_tuple=False), types.GeneratorType)
    True
    >>> tuple(Triple.DUCKS.from_first("Homels", as_tuple=False))
    ()
    >>> isinstance(Triple.DUCKS.from_first("Huth", as_tuple=False), types.GeneratorType)
    True
    >>> tuple(Triple.DUCKS.from_first("Huth", as_tuple=False))
    ()

    >>> isinstance(Triple.MCDUCK_NEPHEWS.from_first("Homer", as_tuple=False), types.GeneratorType)
    True
    >>> tuple(Triple.MCDUCK_NEPHEWS.from_first("Homer", as_tuple=False))
    (<Triple.SIMPSONS: NamedTuple(first='Homer', second='Bart', third='Marge')>, <Triple.THE_SIMPSONS: NamedTuple(first='Homer', second='Marge', third='Lisa')>)
    >>> isinstance(Triple.MCDUCK_NEPHEWS.from_first("Huey", as_tuple=False), types.GeneratorType)
    True
    >>> tuple(Triple.MCDUCK_NEPHEWS.from_first("Huey", as_tuple=False))
    (<Triple.DUCKS: NamedTuple(first='Huey', second='Dewey', third='Louie')>, <Triple.DUCKS: NamedTuple(first='Huey', second='Dewey', third='Louie')>)
    >>> isinstance(Triple.MCDUCK_NEPHEWS.from_first("Homels", as_tuple=False), types.GeneratorType)
    True
    >>> tuple(Triple.MCDUCK_NEPHEWS.from_first("Homels", as_tuple=False))
    ()
    >>> isinstance(Triple.MCDUCK_NEPHEWS.from_first("Huth", as_tuple=False), types.GeneratorType)
    True
    >>> tuple(Triple.MCDUCK_NEPHEWS.from_first("Huth", as_tuple=False))
    ()

    >>> isinstance(Triple.THE_SIMPSONS.from_first("Homer", as_tuple=False), types.GeneratorType)
    True
    >>> tuple(Triple.THE_SIMPSONS.from_first("Homer", as_tuple=False))
    (<Triple.SIMPSONS: NamedTuple(first='Homer', second='Bart', third='Marge')>, <Triple.THE_SIMPSONS: NamedTuple(first='Homer', second='Marge', third='Lisa')>)
    >>> isinstance(Triple.THE_SIMPSONS.from_first("Huey", as_tuple=False), types.GeneratorType)
    True
    >>> tuple(Triple.THE_SIMPSONS.from_first("Huey", as_tuple=False))
    (<Triple.DUCKS: NamedTuple(first='Huey', second='Dewey', third='Louie')>, <Triple.DUCKS: NamedTuple(first='Huey', second='Dewey', third='Louie')>)
    >>> isinstance(Triple.THE_SIMPSONS.from_first("Homels", as_tuple=False), types.GeneratorType)
    True
    >>> tuple(Triple.THE_SIMPSONS.from_first("Homels", as_tuple=False))
    ()
    >>> isinstance(Triple.THE_SIMPSONS.from_first("Huth", as_tuple=False), types.GeneratorType)
    True
    >>> tuple(Triple.THE_SIMPSONS.from_first("Huth", as_tuple=False))
    ()

# Test class method from_second with parameter as_tuple=True::

    >>> NamedEnum.from_second("Bart")
    Traceback (most recent call last):
    ...
    AttributeError: from_second
    >>> ExtendedEnum.from_second("Bart")
    Traceback (most recent call last):
    ...
    AttributeError: from_second
    >>> TripleEnum.from_second("Bart")
    ()
    >>> TripleEnum.from_second("Dewey")
    ()
    >>> TripleEnum.from_second("Marge")
    ()

    >>> Pair.from_second("Jerry")
    Traceback (most recent call last):
    ...
    AttributeError: from_second
    >>> Pair.TOM_AND_JERRY.from_second("Jerry")
    Traceback (most recent call last):
    ...
    AttributeError: 'Pair' object has no attribute 'from_second'
    >>> Pair.MIKE_AND_MOLLY.from_second("Jerry")
    Traceback (most recent call last):
    ...
    AttributeError: 'Pair' object has no attribute 'from_second'
    >>> Pair.MIKE_AND_PIPPEN.from_second("Jerry")
    Traceback (most recent call last):
    ...
    AttributeError: 'Pair' object has no attribute 'from_second'
    >>> Pair.MM_AND_M.from_second("Jerry")
    Traceback (most recent call last):
    ...
    AttributeError: 'Pair' object has no attribute 'from_second'

    >>> Triple.from_second("Bart")
    (<Triple.SIMPSONS: NamedTuple(first='Homer', second='Bart', third='Marge')>,)
    >>> Triple.from_second("Dewey")
    (<Triple.DUCKS: NamedTuple(first='Huey', second='Dewey', third='Louie')>, <Triple.DUCKS: NamedTuple(first='Huey', second='Dewey', third='Louie')>)
    >>> Triple.from_second("Marge")
    (<Triple.THE_SIMPSONS: NamedTuple(first='Homer', second='Marge', third='Lisa')>,)
    >>> Triple.from_second("Banny")
    ()
    >>> Triple.from_second("David")
    ()
    >>> Triple.from_second("Magie")
    ()

    >>> Triple.SIMPSONS.from_second("Bart")
    (<Triple.SIMPSONS: NamedTuple(first='Homer', second='Bart', third='Marge')>,)
    >>> Triple.SIMPSONS.from_second("Dewey")
    (<Triple.DUCKS: NamedTuple(first='Huey', second='Dewey', third='Louie')>, <Triple.DUCKS: NamedTuple(first='Huey', second='Dewey', third='Louie')>)
    >>> Triple.SIMPSONS.from_second("Marge")
    (<Triple.THE_SIMPSONS: NamedTuple(first='Homer', second='Marge', third='Lisa')>,)
    >>> Triple.SIMPSONS.from_second("Banny")
    ()
    >>> Triple.SIMPSONS.from_second("David")
    ()
    >>> Triple.SIMPSONS.from_second("Magie")
    ()

    >>> Triple.DUCKS.from_second("Bart")
    (<Triple.SIMPSONS: NamedTuple(first='Homer', second='Bart', third='Marge')>,)
    >>> Triple.DUCKS.from_second("Dewey")
    (<Triple.DUCKS: NamedTuple(first='Huey', second='Dewey', third='Louie')>, <Triple.DUCKS: NamedTuple(first='Huey', second='Dewey', third='Louie')>)
    >>> Triple.DUCKS.from_second("Marge")
    (<Triple.THE_SIMPSONS: NamedTuple(first='Homer', second='Marge', third='Lisa')>,)
    >>> Triple.DUCKS.from_second("Banny")
    ()
    >>> Triple.DUCKS.from_second("David")
    ()
    >>> Triple.DUCKS.from_second("Magie")
    ()

    >>> Triple.MCDUCK_NEPHEWS.from_second("Bart")
    (<Triple.SIMPSONS: NamedTuple(first='Homer', second='Bart', third='Marge')>,)
    >>> Triple.MCDUCK_NEPHEWS.from_second("Dewey")
    (<Triple.DUCKS: NamedTuple(first='Huey', second='Dewey', third='Louie')>, <Triple.DUCKS: NamedTuple(first='Huey', second='Dewey', third='Louie')>)
    >>> Triple.MCDUCK_NEPHEWS.from_second("Marge")
    (<Triple.THE_SIMPSONS: NamedTuple(first='Homer', second='Marge', third='Lisa')>,)
    >>> Triple.MCDUCK_NEPHEWS.from_second("Banny")
    ()
    >>> Triple.MCDUCK_NEPHEWS.from_second("David")
    ()
    >>> Triple.MCDUCK_NEPHEWS.from_second("Magie")
    ()

    >>> Triple.THE_SIMPSONS.from_second("Bart")
    (<Triple.SIMPSONS: NamedTuple(first='Homer', second='Bart', third='Marge')>,)
    >>> Triple.THE_SIMPSONS.from_second("Dewey")
    (<Triple.DUCKS: NamedTuple(first='Huey', second='Dewey', third='Louie')>, <Triple.DUCKS: NamedTuple(first='Huey', second='Dewey', third='Louie')>)
    >>> Triple.THE_SIMPSONS.from_second("Marge")
    (<Triple.THE_SIMPSONS: NamedTuple(first='Homer', second='Marge', third='Lisa')>,)
    >>> Triple.THE_SIMPSONS.from_second("Banny")
    ()
    >>> Triple.THE_SIMPSONS.from_second("David")
    ()
    >>> Triple.THE_SIMPSONS.from_second("Magie")
    ()

# Test class method from_second with parameter as_tuple=False::

    >>> isinstance(TripleEnum.from_second("Bart", as_tuple=False), types.GeneratorType)
    True
    >>> tuple(TripleEnum.from_second("Bart", as_tuple=False))
    ()
    >>> isinstance(TripleEnum.from_second("Dewey", as_tuple=False), types.GeneratorType)
    True
    >>> tuple(TripleEnum.from_second("Dewey", as_tuple=False))
    ()
    >>> isinstance(TripleEnum.from_second("Marge", as_tuple=False), types.GeneratorType)
    True
    >>> tuple(TripleEnum.from_second("Marge", as_tuple=False))
    ()

    >>> isinstance(Triple.from_second("Bart", as_tuple=False), types.GeneratorType)
    True
    >>> tuple(Triple.from_second("Bart", as_tuple=False))
    (<Triple.SIMPSONS: NamedTuple(first='Homer', second='Bart', third='Marge')>,)
    >>> isinstance(Triple.from_second("Dewey", as_tuple=False), types.GeneratorType)
    True
    >>> tuple(Triple.from_second("Dewey", as_tuple=False))
    (<Triple.DUCKS: NamedTuple(first='Huey', second='Dewey', third='Louie')>, <Triple.DUCKS: NamedTuple(first='Huey', second='Dewey', third='Louie')>)
    >>> isinstance(Triple.from_second("Marge", as_tuple=False), types.GeneratorType)
    True
    >>> tuple(Triple.from_second("Marge", as_tuple=False))
    (<Triple.THE_SIMPSONS: NamedTuple(first='Homer', second='Marge', third='Lisa')>,)
    >>> isinstance(Triple.from_second("Banny", as_tuple=False), types.GeneratorType)
    True
    >>> tuple(Triple.from_second("Banny", as_tuple=False))
    ()
    >>> isinstance(Triple.from_second("David", as_tuple=False), types.GeneratorType)
    True
    >>> tuple(Triple.from_second("David", as_tuple=False))
    ()
    >>> isinstance(Triple.from_second("Magie", as_tuple=False), types.GeneratorType)
    True
    >>> tuple(Triple.from_second("Magie", as_tuple=False))
    ()

    >>> isinstance(Triple.SIMPSONS.from_second("Bart", as_tuple=False), types.GeneratorType)
    True
    >>> tuple(Triple.SIMPSONS.from_second("Bart", as_tuple=False))
    (<Triple.SIMPSONS: NamedTuple(first='Homer', second='Bart', third='Marge')>,)
    >>> isinstance(Triple.SIMPSONS.from_second("Dewey", as_tuple=False), types.GeneratorType)
    True
    >>> tuple(Triple.SIMPSONS.from_second("Dewey", as_tuple=False))
    (<Triple.DUCKS: NamedTuple(first='Huey', second='Dewey', third='Louie')>, <Triple.DUCKS: NamedTuple(first='Huey', second='Dewey', third='Louie')>)
    >>> isinstance(Triple.SIMPSONS.from_second("Marge", as_tuple=False), types.GeneratorType)
    True
    >>> tuple(Triple.SIMPSONS.from_second("Marge", as_tuple=False))
    (<Triple.THE_SIMPSONS: NamedTuple(first='Homer', second='Marge', third='Lisa')>,)
    >>> isinstance(Triple.SIMPSONS.from_second("Banny", as_tuple=False), types.GeneratorType)
    True
    >>> tuple(Triple.SIMPSONS.from_second("Banny", as_tuple=False))
    ()
    >>> isinstance(Triple.SIMPSONS.from_second("David", as_tuple=False), types.GeneratorType)
    True
    >>> tuple(Triple.SIMPSONS.from_second("David", as_tuple=False))
    ()
    >>> isinstance(Triple.SIMPSONS.from_second("Magie", as_tuple=False), types.GeneratorType)
    True
    >>> tuple(Triple.SIMPSONS.from_second("Magie", as_tuple=False))
    ()

    >>> isinstance(Triple.DUCKS.from_second("Bart", as_tuple=False), types.GeneratorType)
    True
    >>> tuple(Triple.DUCKS.from_second("Bart", as_tuple=False))
    (<Triple.SIMPSONS: NamedTuple(first='Homer', second='Bart', third='Marge')>,)
    >>> isinstance(Triple.DUCKS.from_second("Dewey", as_tuple=False), types.GeneratorType)
    True
    >>> tuple(Triple.DUCKS.from_second("Dewey", as_tuple=False))
    (<Triple.DUCKS: NamedTuple(first='Huey', second='Dewey', third='Louie')>, <Triple.DUCKS: NamedTuple(first='Huey', second='Dewey', third='Louie')>)
    >>> isinstance(Triple.DUCKS.from_second("Marge", as_tuple=False), types.GeneratorType)
    True
    >>> tuple(Triple.DUCKS.from_second("Marge", as_tuple=False))
    (<Triple.THE_SIMPSONS: NamedTuple(first='Homer', second='Marge', third='Lisa')>,)
    >>> isinstance(Triple.DUCKS.from_second("Banny", as_tuple=False), types.GeneratorType)
    True
    >>> tuple(Triple.DUCKS.from_second("Banny", as_tuple=False))
    ()
    >>> isinstance(Triple.DUCKS.from_second("David", as_tuple=False), types.GeneratorType)
    True
    >>> tuple(Triple.DUCKS.from_second("David", as_tuple=False))
    ()
    >>> isinstance(Triple.DUCKS.from_second("Magie", as_tuple=False), types.GeneratorType)
    True
    >>> tuple(Triple.DUCKS.from_second("Magie", as_tuple=False))
    ()

    >>> isinstance(Triple.MCDUCK_NEPHEWS.from_second("Bart", as_tuple=False), types.GeneratorType)
    True
    >>> tuple(Triple.MCDUCK_NEPHEWS.from_second("Bart", as_tuple=False))
    (<Triple.SIMPSONS: NamedTuple(first='Homer', second='Bart', third='Marge')>,)
    >>> isinstance(Triple.MCDUCK_NEPHEWS.from_second("Dewey", as_tuple=False), types.GeneratorType)
    True
    >>> tuple(Triple.MCDUCK_NEPHEWS.from_second("Dewey", as_tuple=False))
    (<Triple.DUCKS: NamedTuple(first='Huey', second='Dewey', third='Louie')>, <Triple.DUCKS: NamedTuple(first='Huey', second='Dewey', third='Louie')>)
    >>> isinstance(Triple.MCDUCK_NEPHEWS.from_second("Marge", as_tuple=False), types.GeneratorType)
    True
    >>> tuple(Triple.MCDUCK_NEPHEWS.from_second("Marge", as_tuple=False))
    (<Triple.THE_SIMPSONS: NamedTuple(first='Homer', second='Marge', third='Lisa')>,)
    >>> isinstance(Triple.MCDUCK_NEPHEWS.from_second("Banny", as_tuple=False), types.GeneratorType)
    True
    >>> tuple(Triple.MCDUCK_NEPHEWS.from_second("Banny", as_tuple=False))
    ()
    >>> isinstance(Triple.MCDUCK_NEPHEWS.from_second("David", as_tuple=False), types.GeneratorType)
    True
    >>> tuple(Triple.MCDUCK_NEPHEWS.from_second("David", as_tuple=False))
    ()
    >>> isinstance(Triple.MCDUCK_NEPHEWS.from_second("Magie", as_tuple=False), types.GeneratorType)
    True
    >>> tuple(Triple.MCDUCK_NEPHEWS.from_second("Magie", as_tuple=False))
    ()

    >>> isinstance(Triple.THE_SIMPSONS.from_second("Bart", as_tuple=False), types.GeneratorType)
    True
    >>> tuple(Triple.THE_SIMPSONS.from_second("Bart", as_tuple=False))
    (<Triple.SIMPSONS: NamedTuple(first='Homer', second='Bart', third='Marge')>,)
    >>> isinstance(Triple.THE_SIMPSONS.from_second("Dewey", as_tuple=False), types.GeneratorType)
    True
    >>> tuple(Triple.THE_SIMPSONS.from_second("Dewey", as_tuple=False))
    (<Triple.DUCKS: NamedTuple(first='Huey', second='Dewey', third='Louie')>, <Triple.DUCKS: NamedTuple(first='Huey', second='Dewey', third='Louie')>)
    >>> isinstance(Triple.THE_SIMPSONS.from_second("Marge", as_tuple=False), types.GeneratorType)
    True
    >>> tuple(Triple.THE_SIMPSONS.from_second("Marge", as_tuple=False))
    (<Triple.THE_SIMPSONS: NamedTuple(first='Homer', second='Marge', third='Lisa')>,)
    >>> isinstance(Triple.THE_SIMPSONS.from_second("Banny", as_tuple=False), types.GeneratorType)
    True
    >>> tuple(Triple.THE_SIMPSONS.from_second("Banny", as_tuple=False))
    ()
    >>> isinstance(Triple.THE_SIMPSONS.from_second("David", as_tuple=False), types.GeneratorType)
    True
    >>> tuple(Triple.THE_SIMPSONS.from_second("David", as_tuple=False))
    ()
    >>> isinstance(Triple.THE_SIMPSONS.from_second("Magie", as_tuple=False), types.GeneratorType)
    True
    >>> tuple(Triple.THE_SIMPSONS.from_second("Magie", as_tuple=False))
    ()

# Test class method from_third with parameter as_tuple=True::

    >>> NamedEnum.from_third("Marge")
    Traceback (most recent call last):
    ...
    AttributeError: from_third
    >>> ExtendedEnum.from_third("Marge")
    Traceback (most recent call last):
    ...
    AttributeError: from_third
    >>> TripleEnum.from_third("Marge")
    ()
    >>> TripleEnum.from_third("Louie")
    ()
    >>> TripleEnum.from_third("Lisa")
    ()

    >>> Pair.from_third("Jerry")
    Traceback (most recent call last):
    ...
    AttributeError: from_third
    >>> Pair.TOM_AND_JERRY.from_third("Jerry")
    Traceback (most recent call last):
    ...
    AttributeError: 'Pair' object has no attribute 'from_third'
    >>> Pair.MIKE_AND_MOLLY.from_third("Jerry")
    Traceback (most recent call last):
    ...
    AttributeError: 'Pair' object has no attribute 'from_third'
    >>> Pair.MIKE_AND_PIPPEN.from_third("Jerry")
    Traceback (most recent call last):
    ...
    AttributeError: 'Pair' object has no attribute 'from_third'
    >>> Pair.MM_AND_M.from_third("Jerry")
    Traceback (most recent call last):
    ...
    AttributeError: 'Pair' object has no attribute 'from_third'

    >>> Triple.from_third("Marge")
    (<Triple.SIMPSONS: NamedTuple(first='Homer', second='Bart', third='Marge')>,)
    >>> Triple.from_third("Louie")
    (<Triple.DUCKS: NamedTuple(first='Huey', second='Dewey', third='Louie')>, <Triple.DUCKS: NamedTuple(first='Huey', second='Dewey', third='Louie')>)
    >>> Triple.from_third("Lisa")
    (<Triple.THE_SIMPSONS: NamedTuple(first='Homer', second='Marge', third='Lisa')>,)
    >>> Triple.from_third("Mary")
    ()
    >>> Triple.from_third("Louies")
    ()
    >>> Triple.from_third("Lily")
    ()

    >>> Triple.SIMPSONS.from_third("Marge")
    (<Triple.SIMPSONS: NamedTuple(first='Homer', second='Bart', third='Marge')>,)
    >>> Triple.SIMPSONS.from_third("Louie")
    (<Triple.DUCKS: NamedTuple(first='Huey', second='Dewey', third='Louie')>, <Triple.DUCKS: NamedTuple(first='Huey', second='Dewey', third='Louie')>)
    >>> Triple.SIMPSONS.from_third("Lisa")
    (<Triple.THE_SIMPSONS: NamedTuple(first='Homer', second='Marge', third='Lisa')>,)
    >>> Triple.SIMPSONS.from_third("Mary")
    ()
    >>> Triple.SIMPSONS.from_third("Louies")
    ()
    >>> Triple.SIMPSONS.from_third("Lily")
    ()

    >>> Triple.DUCKS.from_third("Marge")
    (<Triple.SIMPSONS: NamedTuple(first='Homer', second='Bart', third='Marge')>,)
    >>> Triple.DUCKS.from_third("Louie")
    (<Triple.DUCKS: NamedTuple(first='Huey', second='Dewey', third='Louie')>, <Triple.DUCKS: NamedTuple(first='Huey', second='Dewey', third='Louie')>)
    >>> Triple.DUCKS.from_third("Lisa")
    (<Triple.THE_SIMPSONS: NamedTuple(first='Homer', second='Marge', third='Lisa')>,)
    >>> Triple.DUCKS.from_third("Mary")
    ()
    >>> Triple.DUCKS.from_third("Louies")
    ()
    >>> Triple.DUCKS.from_third("Lily")
    ()

    >>> Triple.MCDUCK_NEPHEWS.from_third("Marge")
    (<Triple.SIMPSONS: NamedTuple(first='Homer', second='Bart', third='Marge')>,)
    >>> Triple.MCDUCK_NEPHEWS.from_third("Louie")
    (<Triple.DUCKS: NamedTuple(first='Huey', second='Dewey', third='Louie')>, <Triple.DUCKS: NamedTuple(first='Huey', second='Dewey', third='Louie')>)
    >>> Triple.MCDUCK_NEPHEWS.from_third("Lisa")
    (<Triple.THE_SIMPSONS: NamedTuple(first='Homer', second='Marge', third='Lisa')>,)
    >>> Triple.MCDUCK_NEPHEWS.from_third("Mary")
    ()
    >>> Triple.MCDUCK_NEPHEWS.from_third("Louies")
    ()
    >>> Triple.MCDUCK_NEPHEWS.from_third("Lily")
    ()

    >>> Triple.THE_SIMPSONS.from_third("Marge")
    (<Triple.SIMPSONS: NamedTuple(first='Homer', second='Bart', third='Marge')>,)
    >>> Triple.THE_SIMPSONS.from_third("Louie")
    (<Triple.DUCKS: NamedTuple(first='Huey', second='Dewey', third='Louie')>, <Triple.DUCKS: NamedTuple(first='Huey', second='Dewey', third='Louie')>)
    >>> Triple.THE_SIMPSONS.from_third("Lisa")
    (<Triple.THE_SIMPSONS: NamedTuple(first='Homer', second='Marge', third='Lisa')>,)
    >>> Triple.THE_SIMPSONS.from_third("Mary")
    ()
    >>> Triple.THE_SIMPSONS.from_third("Louies")
    ()
    >>> Triple.THE_SIMPSONS.from_third("Lily")
    ()

# Test class method from_third with parameter as_tuple=False::

    >>> isinstance(Triple.THE_SIMPSONS.from_third("Marge", as_tuple=False), types.GeneratorType)
    True
    >>> tuple(TripleEnum.from_third("Marge", as_tuple=False))
    ()
    >>> isinstance(Triple.THE_SIMPSONS.from_third("Louie", as_tuple=False), types.GeneratorType)
    True
    >>> tuple(TripleEnum.from_third("Louie", as_tuple=False))
    ()
    >>> isinstance(Triple.THE_SIMPSONS.from_third("Lisa", as_tuple=False), types.GeneratorType)
    True
    >>> tuple(TripleEnum.from_third("Lisa", as_tuple=False))
    ()

    >>> isinstance(Triple.THE_SIMPSONS.from_third("Marge", as_tuple=False), types.GeneratorType)
    True
    >>> tuple(Triple.from_third("Marge", as_tuple=False))
    (<Triple.SIMPSONS: NamedTuple(first='Homer', second='Bart', third='Marge')>,)
    >>> isinstance(Triple.THE_SIMPSONS.from_third("Louie", as_tuple=False), types.GeneratorType)
    True
    >>> tuple(Triple.from_third("Louie", as_tuple=False))
    (<Triple.DUCKS: NamedTuple(first='Huey', second='Dewey', third='Louie')>, <Triple.DUCKS: NamedTuple(first='Huey', second='Dewey', third='Louie')>)
    >>> isinstance(Triple.THE_SIMPSONS.from_third("Lisa", as_tuple=False), types.GeneratorType)
    True
    >>> tuple(Triple.from_third("Lisa", as_tuple=False))
    (<Triple.THE_SIMPSONS: NamedTuple(first='Homer', second='Marge', third='Lisa')>,)
    >>> isinstance(Triple.THE_SIMPSONS.from_third("Mary", as_tuple=False), types.GeneratorType)
    True
    >>> tuple(Triple.from_third("Mary", as_tuple=False))
    ()
    >>> isinstance(Triple.THE_SIMPSONS.from_third("Louies", as_tuple=False), types.GeneratorType)
    True
    >>> tuple(Triple.from_third("Louies", as_tuple=False))
    ()
    >>> isinstance(Triple.THE_SIMPSONS.from_third("Lily", as_tuple=False), types.GeneratorType)
    True
    >>> tuple(Triple.from_third("Lily", as_tuple=False))
    ()

    >>> isinstance(Triple.THE_SIMPSONS.from_third("Marge", as_tuple=False), types.GeneratorType)
    True
    >>> tuple(Triple.SIMPSONS.from_third("Marge", as_tuple=False))
    (<Triple.SIMPSONS: NamedTuple(first='Homer', second='Bart', third='Marge')>,)
    >>> isinstance(Triple.THE_SIMPSONS.from_third("Louie", as_tuple=False), types.GeneratorType)
    True
    >>> tuple(Triple.SIMPSONS.from_third("Louie", as_tuple=False))
    (<Triple.DUCKS: NamedTuple(first='Huey', second='Dewey', third='Louie')>, <Triple.DUCKS: NamedTuple(first='Huey', second='Dewey', third='Louie')>)
    >>> isinstance(Triple.THE_SIMPSONS.from_third("Lisa", as_tuple=False), types.GeneratorType)
    True
    >>> tuple(Triple.SIMPSONS.from_third("Lisa", as_tuple=False))
    (<Triple.THE_SIMPSONS: NamedTuple(first='Homer', second='Marge', third='Lisa')>,)
    >>> isinstance(Triple.THE_SIMPSONS.from_third("Mary", as_tuple=False), types.GeneratorType)
    True
    >>> tuple(Triple.SIMPSONS.from_third("Mary", as_tuple=False))
    ()
    >>> isinstance(Triple.THE_SIMPSONS.from_third("Louies", as_tuple=False), types.GeneratorType)
    True
    >>> tuple(Triple.SIMPSONS.from_third("Louies", as_tuple=False))
    ()
    >>> isinstance(Triple.THE_SIMPSONS.from_third("Lily", as_tuple=False), types.GeneratorType)
    True
    >>> tuple(Triple.SIMPSONS.from_third("Lily", as_tuple=False))
    ()

    >>> isinstance(Triple.THE_SIMPSONS.from_third("Marge", as_tuple=False), types.GeneratorType)
    True
    >>> tuple(Triple.DUCKS.from_third("Marge", as_tuple=False))
    (<Triple.SIMPSONS: NamedTuple(first='Homer', second='Bart', third='Marge')>,)
    >>> isinstance(Triple.THE_SIMPSONS.from_third("Louie", as_tuple=False), types.GeneratorType)
    True
    >>> tuple(Triple.DUCKS.from_third("Louie", as_tuple=False))
    (<Triple.DUCKS: NamedTuple(first='Huey', second='Dewey', third='Louie')>, <Triple.DUCKS: NamedTuple(first='Huey', second='Dewey', third='Louie')>)
    >>> isinstance(Triple.THE_SIMPSONS.from_third("Lisa", as_tuple=False), types.GeneratorType)
    True
    >>> tuple(Triple.DUCKS.from_third("Lisa", as_tuple=False))
    (<Triple.THE_SIMPSONS: NamedTuple(first='Homer', second='Marge', third='Lisa')>,)
    >>> isinstance(Triple.THE_SIMPSONS.from_third("Mary", as_tuple=False), types.GeneratorType)
    True
    >>> tuple(Triple.DUCKS.from_third("Mary", as_tuple=False))
    ()
    >>> isinstance(Triple.THE_SIMPSONS.from_third("Louies", as_tuple=False), types.GeneratorType)
    True
    >>> tuple(Triple.DUCKS.from_third("Louies", as_tuple=False))
    ()
    >>> isinstance(Triple.THE_SIMPSONS.from_third("Lily", as_tuple=False), types.GeneratorType)
    True
    >>> tuple(Triple.DUCKS.from_third("Lily", as_tuple=False))
    ()

    >>> isinstance(Triple.MCDUCK_NEPHEWS.from_third("Marge", as_tuple=False), types.GeneratorType)
    True
    >>> tuple(Triple.MCDUCK_NEPHEWS.from_third("Marge", as_tuple=False))
    (<Triple.SIMPSONS: NamedTuple(first='Homer', second='Bart', third='Marge')>,)
    >>> isinstance(Triple.MCDUCK_NEPHEWS.from_third("Louie", as_tuple=False), types.GeneratorType)
    True
    >>> tuple(Triple.MCDUCK_NEPHEWS.from_third("Louie", as_tuple=False))
    (<Triple.DUCKS: NamedTuple(first='Huey', second='Dewey', third='Louie')>, <Triple.DUCKS: NamedTuple(first='Huey', second='Dewey', third='Louie')>)
    >>> isinstance(Triple.MCDUCK_NEPHEWS.from_third("Lisa", as_tuple=False), types.GeneratorType)
    True
    >>> tuple(Triple.MCDUCK_NEPHEWS.from_third("Lisa", as_tuple=False))
    (<Triple.THE_SIMPSONS: NamedTuple(first='Homer', second='Marge', third='Lisa')>,)
    >>> isinstance(Triple.MCDUCK_NEPHEWS.from_third("Mary", as_tuple=False), types.GeneratorType)
    True
    >>> tuple(Triple.MCDUCK_NEPHEWS.from_third("Mary", as_tuple=False))
    ()
    >>> isinstance(Triple.MCDUCK_NEPHEWS.from_third("Louies", as_tuple=False), types.GeneratorType)
    True
    >>> tuple(Triple.MCDUCK_NEPHEWS.from_third("Louies", as_tuple=False))
    ()
    >>> isinstance(Triple.MCDUCK_NEPHEWS.from_third("Lily", as_tuple=False), types.GeneratorType)
    True
    >>> tuple(Triple.MCDUCK_NEPHEWS.from_third("Lily", as_tuple=False))
    ()

    >>> isinstance(Triple.THE_SIMPSONS.from_third("Marge", as_tuple=False), types.GeneratorType)
    True
    >>> tuple(Triple.THE_SIMPSONS.from_third("Marge", as_tuple=False))
    (<Triple.SIMPSONS: NamedTuple(first='Homer', second='Bart', third='Marge')>,)
    >>> isinstance(Triple.THE_SIMPSONS.from_third("Louie", as_tuple=False), types.GeneratorType)
    True
    >>> tuple(Triple.THE_SIMPSONS.from_third("Louie", as_tuple=False))
    (<Triple.DUCKS: NamedTuple(first='Huey', second='Dewey', third='Louie')>, <Triple.DUCKS: NamedTuple(first='Huey', second='Dewey', third='Louie')>)
    >>> isinstance(Triple.THE_SIMPSONS.from_third("Lisa", as_tuple=False), types.GeneratorType)
    True
    >>> tuple(Triple.THE_SIMPSONS.from_third("Lisa", as_tuple=False))
    (<Triple.THE_SIMPSONS: NamedTuple(first='Homer', second='Marge', third='Lisa')>,)
    >>> isinstance(Triple.THE_SIMPSONS.from_third("Mary", as_tuple=False), types.GeneratorType)
    True
    >>> tuple(Triple.THE_SIMPSONS.from_third("Mary", as_tuple=False))
    ()
    >>> isinstance(Triple.THE_SIMPSONS.from_third("Louies", as_tuple=False), types.GeneratorType)
    True
    >>> tuple(Triple.THE_SIMPSONS.from_third("Louies", as_tuple=False))
    ()
    >>> isinstance(Triple.THE_SIMPSONS.from_third("Lily", as_tuple=False), types.GeneratorType)
    True
    >>> tuple(Triple.THE_SIMPSONS.from_third("Lily", as_tuple=False))
    ()

# Test class method from_forth with parameter as_tuple=True::

    >>> NamedEnum.from_forth("Hailey")
    Traceback (most recent call last):
    ...
    AttributeError: from_forth
    >>> ExtendedEnum.from_forth("Hailey")
    Traceback (most recent call last):
    ...
    AttributeError: from_forth
    >>> TripleEnum.from_forth("Hailey")
    Traceback (most recent call last):
    ...
    AttributeError: from_forth

    >>> Pair.from_forth("Hailey")
    Traceback (most recent call last):
    ...
    AttributeError: from_forth
    >>> Pair.TOM_AND_JERRY.from_forth("Hailey")
    Traceback (most recent call last):
    ...
    AttributeError: 'Pair' object has no attribute 'from_forth'
    >>> Pair.MIKE_AND_MOLLY.from_forth("Hailey")
    Traceback (most recent call last):
    ...
    AttributeError: 'Pair' object has no attribute 'from_forth'
    >>> Pair.MIKE_AND_PIPPEN.from_forth("Hailey")
    Traceback (most recent call last):
    ...
    AttributeError: 'Pair' object has no attribute 'from_forth'
    >>> Pair.MM_AND_M.from_forth("Hailey")
    Traceback (most recent call last):
    ...
    AttributeError: 'Pair' object has no attribute 'from_forth'

    >>> Triple.from_forth("Hailey")
    Traceback (most recent call last):
    ...
    AttributeError: from_forth
    >>> Triple.SIMPSONS.from_forth("Hailey")
    Traceback (most recent call last):
    ...
    AttributeError: 'Triple' object has no attribute 'from_forth'
    >>> Triple.DUCKS.from_forth("Hailey")
    Traceback (most recent call last):
    ...
    AttributeError: 'Triple' object has no attribute 'from_forth'
    >>> Triple.MCDUCK_NEPHEWS.from_forth("Hailey")
    Traceback (most recent call last):
    ...
    AttributeError: 'Triple' object has no attribute 'from_forth'
    >>> Triple.THE_SIMPSONS.from_forth("Hailey")
    Traceback (most recent call last):
    ...
    AttributeError: 'Triple' object has no attribute 'from_forth'

# Test class method has_first::

    >>> NamedEnum.has_first("Homer")
    Traceback (most recent call last):
    ...
    AttributeError: has_first
    >>> ExtendedEnum.has_first("Homer")
    Traceback (most recent call last):
    ...
    AttributeError: has_first
    >>> TripleEnum.has_first("Homer")
    False
    >>> TripleEnum.has_first("Huey")
    False

    >>> Pair.has_first("Tom")
    Traceback (most recent call last):
    ...
    AttributeError: has_first
    >>> Pair.TOM_AND_JERRY.has_first("Tom")
    Traceback (most recent call last):
    ...
    AttributeError: 'Pair' object has no attribute 'has_first'
    >>> Pair.MIKE_AND_MOLLY.has_first("Tom")
    Traceback (most recent call last):
    ...
    AttributeError: 'Pair' object has no attribute 'has_first'
    >>> Pair.MIKE_AND_PIPPEN.has_first("Tom")
    Traceback (most recent call last):
    ...
    AttributeError: 'Pair' object has no attribute 'has_first'
    >>> Pair.MM_AND_M.has_first("Tom")
    Traceback (most recent call last):
    ...
    AttributeError: 'Pair' object has no attribute 'has_first'

    >>> Triple.has_first("Homer")
    True
    >>> Triple.has_first("Huey")
    True
    >>> Triple.has_first("Homels")
    False
    >>> Triple.has_first("Huth")
    False

    >>> Triple.SIMPSONS.has_first("Homer")
    True
    >>> Triple.SIMPSONS.has_first("Huey")
    True
    >>> Triple.SIMPSONS.has_first("Homels")
    False
    >>> Triple.SIMPSONS.has_first("Huth")
    False

    >>> Triple.DUCKS.has_first("Homer")
    True
    >>> Triple.DUCKS.has_first("Huey")
    True
    >>> Triple.DUCKS.has_first("Homels")
    False
    >>> Triple.DUCKS.has_first("Huth")
    False

    >>> Triple.MCDUCK_NEPHEWS.has_first("Homer")
    True
    >>> Triple.MCDUCK_NEPHEWS.has_first("Huey")
    True
    >>> Triple.MCDUCK_NEPHEWS.has_first("Homels")
    False
    >>> Triple.MCDUCK_NEPHEWS.has_first("Huth")
    False

    >>> Triple.THE_SIMPSONS.has_first("Homer")
    True
    >>> Triple.THE_SIMPSONS.has_first("Huey")
    True
    >>> Triple.THE_SIMPSONS.has_first("Homels")
    False
    >>> Triple.THE_SIMPSONS.has_first("Huth")
    False

# Test class method has_second::

    >>> NamedEnum.has_second("Bart")
    Traceback (most recent call last):
    ...
    AttributeError: has_second
    >>> ExtendedEnum.has_second("Bart")
    Traceback (most recent call last):
    ...
    AttributeError: has_second
    >>> TripleEnum.has_second("Bart")
    False
    >>> TripleEnum.has_second("Dewey")
    False
    >>> TripleEnum.has_second("Marge")
    False

    >>> Pair.has_second("Jerry")
    Traceback (most recent call last):
    ...
    AttributeError: has_second
    >>> Pair.TOM_AND_JERRY.has_second("Jerry")
    Traceback (most recent call last):
    ...
    AttributeError: 'Pair' object has no attribute 'has_second'
    >>> Pair.MIKE_AND_MOLLY.has_second("Jerry")
    Traceback (most recent call last):
    ...
    AttributeError: 'Pair' object has no attribute 'has_second'
    >>> Pair.MIKE_AND_PIPPEN.has_second("Jerry")
    Traceback (most recent call last):
    ...
    AttributeError: 'Pair' object has no attribute 'has_second'
    >>> Pair.MM_AND_M.has_second("Jerry")
    Traceback (most recent call last):
    ...
    AttributeError: 'Pair' object has no attribute 'has_second'

    >>> Triple.has_second("Bart")
    True
    >>> Triple.has_second("Dewey")
    True
    >>> Triple.has_second("Marge")
    True
    >>> Triple.has_second("Banny")
    False
    >>> Triple.has_second("David")
    False
    >>> Triple.has_second("Magie")
    False

    >>> Triple.SIMPSONS.has_second("Bart")
    True
    >>> Triple.SIMPSONS.has_second("Dewey")
    True
    >>> Triple.SIMPSONS.has_second("Marge")
    True
    >>> Triple.SIMPSONS.has_second("Banny")
    False
    >>> Triple.SIMPSONS.has_second("David")
    False
    >>> Triple.SIMPSONS.has_second("Magie")
    False

    >>> Triple.DUCKS.has_second("Bart")
    True
    >>> Triple.DUCKS.has_second("Dewey")
    True
    >>> Triple.DUCKS.has_second("Marge")
    True
    >>> Triple.DUCKS.has_second("Banny")
    False
    >>> Triple.DUCKS.has_second("David")
    False
    >>> Triple.DUCKS.has_second("Magie")
    False

    >>> Triple.MCDUCK_NEPHEWS.has_second("Bart")
    True
    >>> Triple.MCDUCK_NEPHEWS.has_second("Dewey")
    True
    >>> Triple.MCDUCK_NEPHEWS.has_second("Marge")
    True
    >>> Triple.MCDUCK_NEPHEWS.has_second("Banny")
    False
    >>> Triple.MCDUCK_NEPHEWS.has_second("David")
    False
    >>> Triple.MCDUCK_NEPHEWS.has_second("Magie")
    False

    >>> Triple.THE_SIMPSONS.has_second("Bart")
    True
    >>> Triple.THE_SIMPSONS.has_second("Dewey")
    True
    >>> Triple.THE_SIMPSONS.has_second("Marge")
    True
    >>> Triple.THE_SIMPSONS.has_second("Banny")
    False
    >>> Triple.THE_SIMPSONS.has_second("David")
    False
    >>> Triple.THE_SIMPSONS.has_second("Magie")
    False

# Test class method has_third::

    >>> NamedEnum.has_third("Marge")
    Traceback (most recent call last):
    ...
    AttributeError: has_third
    >>> ExtendedEnum.has_third("Marge")
    Traceback (most recent call last):
    ...
    AttributeError: has_third
    >>> TripleEnum.has_third("Marge")
    False
    >>> TripleEnum.has_third("Louie")
    False
    >>> TripleEnum.has_third("Lisa")
    False

    >>> Pair.has_third("Jerry")
    Traceback (most recent call last):
    ...
    AttributeError: has_third
    >>> Pair.TOM_AND_JERRY.has_third("Jerry")
    Traceback (most recent call last):
    ...
    AttributeError: 'Pair' object has no attribute 'has_third'
    >>> Pair.MIKE_AND_MOLLY.has_third("Jerry")
    Traceback (most recent call last):
    ...
    AttributeError: 'Pair' object has no attribute 'has_third'
    >>> Pair.MIKE_AND_PIPPEN.has_third("Jerry")
    Traceback (most recent call last):
    ...
    AttributeError: 'Pair' object has no attribute 'has_third'
    >>> Pair.MM_AND_M.has_third("Jerry")
    Traceback (most recent call last):
    ...
    AttributeError: 'Pair' object has no attribute 'has_third'

    >>> Triple.has_third("Marge")
    True
    >>> Triple.has_third("Louie")
    True
    >>> Triple.has_third("Lisa")
    True
    >>> Triple.has_third("Mary")
    False
    >>> Triple.has_third("Louies")
    False
    >>> Triple.has_third("Lily")
    False

    >>> Triple.SIMPSONS.has_third("Marge")
    True
    >>> Triple.SIMPSONS.has_third("Louie")
    True
    >>> Triple.SIMPSONS.has_third("Lisa")
    True
    >>> Triple.SIMPSONS.has_third("Mary")
    False
    >>> Triple.SIMPSONS.has_third("Louies")
    False
    >>> Triple.SIMPSONS.has_third("Lily")
    False

    >>> Triple.DUCKS.has_third("Marge")
    True
    >>> Triple.DUCKS.has_third("Louie")
    True
    >>> Triple.DUCKS.has_third("Lisa")
    True
    >>> Triple.DUCKS.has_third("Mary")
    False
    >>> Triple.DUCKS.has_third("Louies")
    False
    >>> Triple.DUCKS.has_third("Lily")
    False

    >>> Triple.MCDUCK_NEPHEWS.has_third("Marge")
    True
    >>> Triple.MCDUCK_NEPHEWS.has_third("Louie")
    True
    >>> Triple.MCDUCK_NEPHEWS.has_third("Lisa")
    True
    >>> Triple.MCDUCK_NEPHEWS.has_third("Mary")
    False
    >>> Triple.MCDUCK_NEPHEWS.has_third("Louies")
    False
    >>> Triple.MCDUCK_NEPHEWS.has_third("Lily")
    False

    >>> Triple.THE_SIMPSONS.has_third("Marge")
    True
    >>> Triple.THE_SIMPSONS.has_third("Louie")
    True
    >>> Triple.THE_SIMPSONS.has_third("Lisa")
    True
    >>> Triple.THE_SIMPSONS.has_third("Mary")
    False
    >>> Triple.THE_SIMPSONS.has_third("Louies")
    False
    >>> Triple.THE_SIMPSONS.has_third("Lily")
    False

# Test class method has_forth::

    >>> NamedEnum.has_forth("Hailey")
    Traceback (most recent call last):
    ...
    AttributeError: has_forth
    >>> ExtendedEnum.has_forth("Hailey")
    Traceback (most recent call last):
    ...
    AttributeError: has_forth
    >>> TripleEnum.has_forth("Hailey")
    Traceback (most recent call last):
    ...
    AttributeError: has_forth

    >>> Pair.has_forth("Hailey")
    Traceback (most recent call last):
    ...
    AttributeError: has_forth
    >>> Pair.TOM_AND_JERRY.has_forth("Hailey")
    Traceback (most recent call last):
    ...
    AttributeError: 'Pair' object has no attribute 'has_forth'
    >>> Pair.MIKE_AND_MOLLY.has_forth("Hailey")
    Traceback (most recent call last):
    ...
    AttributeError: 'Pair' object has no attribute 'has_forth'
    >>> Pair.MIKE_AND_PIPPEN.has_forth("Hailey")
    Traceback (most recent call last):
    ...
    AttributeError: 'Pair' object has no attribute 'has_forth'
    >>> Pair.MM_AND_M.has_forth("Hailey")
    Traceback (most recent call last):
    ...
    AttributeError: 'Pair' object has no attribute 'has_forth'

    >>> Triple.has_forth("Hailey")
    Traceback (most recent call last):
    ...
    AttributeError: has_forth
    >>> Triple.SIMPSONS.has_forth("Hailey")
    Traceback (most recent call last):
    ...
    AttributeError: 'Triple' object has no attribute 'has_forth'
    >>> Triple.DUCKS.has_forth("Hailey")
    Traceback (most recent call last):
    ...
    AttributeError: 'Triple' object has no attribute 'has_forth'
    >>> Triple.MCDUCK_NEPHEWS.has_forth("Hailey")
    Traceback (most recent call last):
    ...
    AttributeError: 'Triple' object has no attribute 'has_forth'
    >>> Triple.THE_SIMPSONS.has_forth("Hailey")
    Traceback (most recent call last):
    ...
    AttributeError: 'Triple' object has no attribute 'has_forth'

# Test normal Enum features::

    >>> Pair.TOM_AND_JERRY
    <Pair.TOM_AND_JERRY: ('Tom', 'Jerry')>
    >>> Pair.MIKE_AND_MOLLY
    <Pair.MIKE_AND_MOLLY: ('Mike', 'Molly')>
    >>> Pair.MIKE_AND_PIPPEN
    <Pair.MIKE_AND_PIPPEN: ('Mike', 'Pippen')>
    >>> Pair.MM_AND_M
    <Pair.MIKE_AND_MOLLY: ('Mike', 'Molly')>

    >>> Pair.TOM_AND_JERRY.name
    'TOM_AND_JERRY'
    >>> Pair.TOM_AND_JERRY.value
    ('Tom', 'Jerry')
    >>> Pair.MIKE_AND_MOLLY.name
    'MIKE_AND_MOLLY'
    >>> Pair.MIKE_AND_MOLLY.value
    ('Mike', 'Molly')
    >>> Pair.MIKE_AND_PIPPEN.name
    'MIKE_AND_PIPPEN'
    >>> Pair.MIKE_AND_PIPPEN.value
    ('Mike', 'Pippen')
    >>> Pair.MM_AND_M.name
    'MIKE_AND_MOLLY'
    >>> Pair.MM_AND_M.value
    ('Mike', 'Molly')

    >>> Triple.SIMPSONS
    <Triple.SIMPSONS: NamedTuple(first='Homer', second='Bart', third='Marge')>
    >>> Triple.DUCKS
    <Triple.DUCKS: NamedTuple(first='Huey', second='Dewey', third='Louie')>
    >>> Triple.MCDUCK_NEPHEWS
    <Triple.DUCKS: NamedTuple(first='Huey', second='Dewey', third='Louie')>
    >>> Triple.THE_SIMPSONS
    <Triple.THE_SIMPSONS: NamedTuple(first='Homer', second='Marge', third='Lisa')>

    >>> Triple.SIMPSONS.name
    'SIMPSONS'
    >>> Triple.SIMPSONS.value
    NamedTuple(first='Homer', second='Bart', third='Marge')
    >>> Triple.DUCKS.name
    'DUCKS'
    >>> Triple.DUCKS.value
    NamedTuple(first='Huey', second='Dewey', third='Louie')
    >>> Triple.MCDUCK_NEPHEWS.name
    'DUCKS'
    >>> Triple.MCDUCK_NEPHEWS.value
    NamedTuple(first='Huey', second='Dewey', third='Louie')
    >>> Triple.THE_SIMPSONS.name
    'THE_SIMPSONS'
    >>> Triple.THE_SIMPSONS.value
    NamedTuple(first='Homer', second='Marge', third='Lisa')

# Test extra feutures and __str__ function::

    >>> print(Pair.TOM_AND_JERRY)
    Pair.TOM_AND_JERRY: ('Tom', 'Jerry')
    >>> Pair.TOM_AND_JERRY.first
    Traceback (most recent call last):
    ...
    AttributeError: 'Pair' object has no attribute 'first'
    >>> Pair.TOM_AND_JERRY.second
    Traceback (most recent call last):
    ...
    AttributeError: 'Pair' object has no attribute 'second'

    >>> print(Pair.MIKE_AND_MOLLY)
    Pair.MIKE_AND_MOLLY: ('Mike', 'Molly')
    >>> Pair.MIKE_AND_MOLLY.first
    Traceback (most recent call last):
    ...
    AttributeError: 'Pair' object has no attribute 'first'
    >>> Pair.MIKE_AND_MOLLY.second
    Traceback (most recent call last):
    ...
    AttributeError: 'Pair' object has no attribute 'second'

    >>> print(Pair.MIKE_AND_PIPPEN)
    Pair.MIKE_AND_PIPPEN: ('Mike', 'Pippen')
    >>> Pair.MIKE_AND_PIPPEN.first
    Traceback (most recent call last):
    ...
    AttributeError: 'Pair' object has no attribute 'first'
    >>> Pair.MIKE_AND_PIPPEN.second
    Traceback (most recent call last):
    ...
    AttributeError: 'Pair' object has no attribute 'second'

    >>> print(Pair.MM_AND_M)
    Pair.MIKE_AND_MOLLY: ('Mike', 'Molly')
    >>> Pair.MM_AND_M.first
    Traceback (most recent call last):
    ...
    AttributeError: 'Pair' object has no attribute 'first'
    >>> Pair.MM_AND_M.second
    Traceback (most recent call last):
    ...
    AttributeError: 'Pair' object has no attribute 'second'

    >>> print(Triple.SIMPSONS)
    Triple.SIMPSONS: NamedTuple(first='Homer', second='Bart', third='Marge')
    >>> Triple.SIMPSONS.first
    'Homer'
    >>> Triple.SIMPSONS.second
    'Bart'
    >>> Triple.SIMPSONS.third
    'Marge'
    >>> Triple.SIMPSONS.forth
    Traceback (most recent call last):
    ...
    AttributeError: 'Triple' object has no attribute 'forth'

    >>> print(Triple.DUCKS)
    Triple.DUCKS: NamedTuple(first='Huey', second='Dewey', third='Louie')
    >>> Triple.DUCKS.first
    'Huey'
    >>> Triple.DUCKS.second
    'Dewey'
    >>> Triple.DUCKS.third
    'Louie'
    >>> Triple.DUCKS.forth
    Traceback (most recent call last):
    ...
    AttributeError: 'Triple' object has no attribute 'forth'

    >>> print(Triple.MCDUCK_NEPHEWS)
    Triple.DUCKS: NamedTuple(first='Huey', second='Dewey', third='Louie')
    >>> Triple.MCDUCK_NEPHEWS.first
    'Huey'
    >>> Triple.MCDUCK_NEPHEWS.second
    'Dewey'
    >>> Triple.MCDUCK_NEPHEWS.third
    'Louie'
    >>> Triple.MCDUCK_NEPHEWS.forth
    Traceback (most recent call last):
    ...
    AttributeError: 'Triple' object has no attribute 'forth'

    >>> print(Triple.THE_SIMPSONS)
    Triple.THE_SIMPSONS: NamedTuple(first='Homer', second='Marge', third='Lisa')
    >>> Triple.THE_SIMPSONS.first
    'Homer'
    >>> Triple.THE_SIMPSONS.second
    'Marge'
    >>> Triple.THE_SIMPSONS.third
    'Lisa'
    >>> Triple.THE_SIMPSONS.forth
    Traceback (most recent call last):
    ...
    AttributeError: 'Triple' object has no attribute 'forth'